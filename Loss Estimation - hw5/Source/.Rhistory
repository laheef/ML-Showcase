stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=(0, 1)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network A') + xlab('degree')
grid.arrange(p2, p1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network A') + xlab('degree')
grid.arrange(p2, p1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network A') + xlab('degree')
grid.arrange(p2, p1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) + ylab("") +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network A') + xlab('degree')
grid.arrange(p2, p1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network A') + xlab('degree')
p1 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) +
scale_y_continuous(breaks = NULL) + ggtitle(label='Network A') + xlab('degree')
grid.arrange(p2, p1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) + ylab("") + + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) + ylab("") + + ggtitle(label='Network A') + xlab('degree')
grid.arrange(p2, p1, ncol=2)
p1 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) + ylab("") + ggtitle(label='Network B') + xlab('degree')
library(ggplot2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) + ylab("") + ggtitle(label='Network A') + xlab('degree')
grid.arrange(p2, p1, ncol=2)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) + ylab("") +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) +
ggtitle(label='Network A') + xlab
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) +
ggtitle(label='Network A') + xlab
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1)) +
ggtitle(label='Network A')
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A')
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A') + xlab('$k_{i}$')
p2
xlab(label="text[i]", parse=TRUE)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A') + xlab(label="text[i]", parse=TRUE)
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A') + xlab("text[i]", parse=TRUE)
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A') + xlab("text[i]")
p2
install.packages("tikzDevice")
library(tikzDevice)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A') + xlab("$text_{i}$")
p2
tikzDevice::tikz(file = "./example_plot.tex", width = 5, height = 3)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A') + xlab("$text_{i}$")
p2
library(ggplot2)
tikzDevice::tikz(file = "./example_plot.tex", width = 5, height = 3)
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red') +
ggtitle(label='Network A') + xlab("$text_{i}$")
p2
dev.off()
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), color='blue', label='Network A') +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), color='red', label='Netwrok B') +
ggtitle(label='Degree distribution') + xlab("node degree") +legend()
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), colour='blue', aes(colour = "Network A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), colour='red', aes(colour = "Network B")) +
ggtitle(label='Degree distribution') + xlab("node degree") +legend()
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), colour='blue', aes(colour = "Network A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), colour='red', aes(colour = "Network B")) +
ggtitle(label='Degree distribution') + xlab("node degree")
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), colour='blue', aes(colour = "Network A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), colour='red', aes(colour = "Network B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Lgend title", values = c("blue", "red",))
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), colour='blue', aes(colour = "Network A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), colour='red', aes(colour = "Network B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Lgend title", values = c("blue", "red", "green", "orange"))
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "Network A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "Network B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Lgend title", values = c("blue", "red", "green", "orange"))
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange"))
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.2))
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5))
p2
p2 <- ggplot(data = data.frame(x = c(1, 14), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5))
p2
p2 <- ggplot(data = data.frame(x = c(0, 14), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5))
p2
grid.arrange(p2, p1, ncol=2)
p2 <- ggplot(data = data.frame(x = c(0, 14), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5))
p2
p2 <- ggplot(data = data.frame(x = c(1, 13), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5))
p2
p2 <- ggplot(data = data.frame(x = c(1, 12), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5))
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5))
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5)) + scale_y_continuous(breaks = NULL)
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5)) + ylab("")
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5)) + ylab("") scale_y_continuous(breaks = NULL)
p2
p2 <- ggplot(data = data.frame(x = c(1, 15), y=c(0, 1)), aes(x, y)) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 3), aes(colour = "A")) +
stat_function(fun = dnorm, n = 101, args = list(mean = 4, sd = 1), aes(colour = "B")) +
ggtitle(label='Degree distribution') + xlab("node degree") + scale_colour_manual("Network", values = c("blue", "red", "green", "orange")) +
theme(legend.position = c(0.8, 0.5)) + ylab("") + scale_y_continuous(breaks = NULL)
p2
c1<- rnorm(1100, mean=4, sd=1)
c1 <- rnorm(275, mean=4, sd=1)
c2 <- rnorm(275, mean=5, sd=1)
c3 <- rnorm(275, mean=7, sd=1.2)
c4 <- rnorm(275, mean=10, sd=2)
df = data.frame(c1, c2, c3, c4)
write.csv(df, 'X:\\Faks\\DS\\sem2\\mlds\\hw2\\data\\myboy3.csv')
c1 <- rnorm(250, mean=4, sd=1)
c2 <- rnorm(250, mean=5, sd=1)
c3 <- rnorm(250, mean=7, sd=1)
c3 <- rnorm(250, mean=8.5, sd=1)
c3 <- rnorm(250, mean=7, sd=1)
c4 <- rnorm(250, mean=8.5, sd=1)
df = data.frame(c1, c2, c3, c4)
write.csv(df, 'X:\\Faks\\DS\\sem2\\mlds\\hw2\\data\\myboy3.csv')
---
title: "mlds-hw5"
author: "Vid Stropnik"
date: "5/3/2021"
output: pdf_document
---
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd("X:/Faks/DS/sem2/mlds/hw5")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
And generate a proxy of true risk using a huge dataset of
toy_data <- function(n, seed = NULL) {
set.seed(seed)
x <- matrix(rnorm(8 * n), ncol = 8)
z <- 0.4 * x[,1] - 0.5 * x[,2] + 1.75 * x[,3] - 0.2 * x[,4] + x[,5]
y <- runif(n) > 1 / (1 + exp(-z))
return (data.frame(x = x, y = y))
}
log_loss <- function(y, p) {
-(y * log(p) + (1 - y) * log(1 - p))
}
df_dgp <- toy_data(100000, 0)
df_dgp
t1 <- toy_data(50, 1)
summary(t1)
?glm
model <- glm( diabetes ~., data = t1, family = binomial)
model <- glm( y ~., data = t1, family = binomial)
summary(model)
model <- glm( y ~., data = t1, family = binomial)
summary(model)
true <- glm(y~., data=df_dgp, family=binomial)
model.fit <- glm( y ~., data = t1, family = binomial)
summary(model.fit)
model.fit <- glm( y ~., data = t1, family = binomial)
summary(model.fit)
model.fit <- glm( y ~., data = t1, family = binomial)
model.fit
x <- predict(model, new_data=df_dgp)
x
x <- predict(model, new_data=df_dgp)
x.mean()
x <- predict(model, new_data=df_dgp)
mean(x)
x <- predict(model, new_data=df_dgp)
x <- predict(model, new_data=df_dgp)
summary(x)
x <- predict(model, new_data=df_dgp)
(x)
x
x <- predict(model, new_data=df_dgp, type = "response")
(x)
x <- predict(model, new_data=df_dgp)
(x)
df_dgp <- toy_data(100000, 0)
df_dgp
t1 <- toy_data(50, 1)
t1
?predict
df_dgp
df_dgp[-y]
t1
t1[-y]
xx <- subset(t1, select=-c(y))
xx
x <- predict(model, new_data=subset(t1, select=-c(y)))
x
t1$y
t1[,-y]
t1[,-9]
?glm
model.fit<- glm.fit( t1[,-9], t1$y, dfamily = binomial)
model.fit<- glm.fit( t1[,-9], t1$y, family = binomial)
model.fit<- glm.fit( t1[,-9], t1$y, family = binomial)
model<- glm( y ~ ., data = t1, family = binomial)
model
model<- glm( y ~ ., data = t1, family = binomial)
model
?predict
model<- glm( y ~ ., data = t1, family = binomial)
?predict.glm
x <- predict.glm(model, newdata=df_dgp, type="response")
x
x <- predict.glm(model, newdata=df_dgp, type="terms")
x
x <- predict.glm(model, newdata=df_dgp, type="response")
summary(x)
model<- glm( x ~ y, data = t1, family = binomial)
model<- glm( x1 ~ y, data = t1, family = binomial)
model<- glm( x.1 ~ y, data = t1, family = binomial)
model<- glm( y ~ ., data = t1, family = binomial)
?glm
model<- glm( y ~ ., data = t1, family = binomial)
model<- glm( y ~ ., data = t1, family = binomial)
predict(model, t1)
model<- glm( y ~ ., data = t1, family = binomial)
predict(model, t1)
t1$y
model<- glm( y ~ ., data = t1, family = binomial)
predict(model, t1)
t1$y > 0
x <- predict.glm(model, newdata=df_dgp)
x <- predict.glm(model, newdata=df_dgp)
x
x <- predict.glm(model, newdata=df_dgp)
x > 0
x <- predict.glm(model, newdata=df_dgp)
x > 0
df_dgp$y
x <- predict.glm(model, newdata=df_dgp)
#x > 0
df_dgp$y
#x <- predict.glm(model, newdata=df_dgp)
#x > 0
df_dgp$y
mean
?mean
x <- predict.glm(model, newdata=df_dgp)
prediction <- x > 0
gt <- df_dgp$y
ll <- log_loss(gt, prediction)
ll
x <- predict.glm(model, newdata=df_dgp)
prediction <- x > 0
gt <- df_dgp$y
ll <- log_loss(prediction, gt)
ll
int(prediction)
prediction
as.numeric(gt)
x <- predict.glm(model, newdata=df_dgp)
prediction <- x
gt <- as.numeric(df_dgp$y)
ll <- log_loss(gt, prediction)
ll
x <- predict.glm(model, newdata=df_dgp)
prediction <- x
prediction
gt <- as.numeric(df_dgp$y)
ll <- log_loss(gt, prediction)
ll
x <- predict.glm(model, newdata=df_dgp)
prediction <- as.numeric(x>0)
gt <- as.numeric(df_dgp$y)
ll <- log_loss(gt, prediction)
ll
x <- predict.glm(model, newdata=df_dgp)
x
model<- glm( y ~ x.1, data = t1, family = binomial)
x <- predict.glm(model, newdata=df_dgp)
x
model<- glm( x.1 ~ y, data = t1, family = binomial)
model<- glm( y ~ x.1 + x.2 + x.3 + x.4 + x.5 + x.6 + x.7 + x.8, data = t1, family = binomial)
x <- predict.glm(model, newdata=df_dgp)
x
model<- glm( y ~ x.1*x.2*x.3*x.4*x.5*x.6*x.7*x.8, data = t1, family = binomial)
model<- glm( y ~ x.1*x.2*x.3*x.4*x.5*x.6*x.7*x.8, data = t1, family = binomial)
x <- predict.glm(model, newdata=df_dgp)
x
model<- glm( y ~ ., data = t1, family = binomial)
x <- predict.glm(model, newdata=df_dgp, type= "response")
x
prediction <- predict.glm(model, newdata=df_dgp, type= "response")
gt <- as.numeric(df_dgp$y)
log_loss(gt, prediction)
prediction <- predict.glm(model, newdata=df_dgp, type= "response")
gt <- as.numeric(df_dgp$y)
mean(log_loss(gt, prediction))
prediction <- predict.glm(model, newdata=df_dgp, type= "response")
gt <- as.numeric(df_dgp$y)
trp <- mean(log_loss(gt, prediction))
sprintf("True risk proxy of h equals %s", trp)
prediction <- predict.glm(model, newdata=df_dgp, type= "response")
gt <- as.numeric(df_dgp$y)
trp <- mean(log_loss(gt, prediction))
sprintf("True risk proxy of h; R(h) = %s", trp)
t2 <- toy_data(50, 2)
prediction <- predict.glm(model, newdata=t2, type= "response")
gt <- as.numeric(t2$y)
r <- mean(log_loss(gt, prediction))
r_stdev <- std.error(log_loss(gt, prediction))
t2 <- toy_data(50, 2)
prediction <- predict.glm(model, newdata=t2, type= "response")
gt <- as.numeric(t2$y)
r <- mean(log_loss(gt, prediction))
r_stdev <- se(log_loss(gt, prediction))
se <- function(x) sqrt(var(x)/length(x))
t2 <- toy_data(50, 2)
prediction <- predict.glm(model, newdata=t2, type= "response")
gt <- as.numeric(t2$y)
r <- mean(log_loss(gt, prediction))
r_stdev <- se(log_loss(gt, prediction))
sprintf("Error of h, computed on t2; R_emp(h) = %s", r)
sprintf("It's standard error is %s", r_stdev)
r - 2*r_stdev < trp < r + 2*r_stdev
1<2
(r - 2*r_stdev < trp) or (trp < r + 2*r_stdev)
(r - 2*r_stdev < trp) || (trp < r + 2*r_stdev)
for i in range(100):
range(100)
?range
range(1, 100)
range(1:100ž)
c(1:100)
for seed in c(2:1002){}
for (seed in c(2:1002)){}
for (seed in c(2:1002)){
print(seed)
}
a <- c()
a
?append
append(a, 1)
a
a <-c(0, 1)
a
append(a, 2)
a
results <-c()
for (seed in c(3:1003)){
tX <- toy_data(50, seed)
prediction <- predict.glm(model, newdata=tx, type= "response")
gt <- as.numeric(tx$y)
r <- mean(log_loss(gt, prediction))
sprintf("Error of h, computed on t2; R_emp(h) = %s", r)
r_stdev <- se(log_loss(gt, prediction))
true_risk_in_95 <- ((r - 2*r_stdev < trp) || (trp < r + 2*r_stdev))
results <- append(results, true_risk_in_95)
}
results <-c()
for (seed in c(3:1003)){
tX <- toy_data(50, seed)
prediction <- predict.glm(model, newdata=tX, type= "response")
gt <- as.numeric(tX$y)
r <- mean(log_loss(gt, prediction))
sprintf("Error of h, computed on t2; R_emp(h) = %s", r)
r_stdev <- se(log_loss(gt, prediction))
true_risk_in_95 <- ((r - 2*r_stdev < trp) || (trp < r + 2*r_stdev))
results <- append(results, true_risk_in_95)
}
c
a
sum(a)
len(a)
a.length
?length
length(a)
p <- sum(as.numeric(results))/length(a)
sprintf("This happens %s \% times", p*100)
p <- sum(as.numeric(results))/length(a)
sprintf("This happens %s % of the time", p*100)
p <- sum(as.numeric(results))/length(a)
sprintf("This happens %s %% of the time", p*100)
p <- sum(as.numeric(results))/length(a)
sprintf("This happens %s of the time", p*100)
p <- sum(as.numeric(results))/length(results)
sprintf("This happens %s of the time", p*100)
p <- sum(as.numeric(results))/length(results)
sprintf("This happens %s percent of the time!", p*100)
